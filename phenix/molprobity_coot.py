# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   3 ', 'GLN', 0.0008883373441689907, (-1.594000000000001, 23.569, 88.878)), ('A', '   4 ', 'LEU', 0.02690778803806136, (1.8470000000000033, 22.775999999999993, 90.295)), ('A', '  24 ', 'ASP', 0.0, (22.06, 9.205999999999998, 97.135)), ('A', '  59 ', 'GLY', 0.00771942432038486, (8.461999999999998, -0.8000000000000002, 94.12199999999999)), ('A', '  72 ', 'MET', 0.042078167010371176, (3.2229999999999994, 15.420999999999996, 97.821)), ('A', '  82 ', 'GLU', 0.034352352722141516, (-6.767, 14.76, 109.956)), ('A', '  83 ', 'GLU', 0.0005651638730341801, (-6.150999999999998, 13.045999999999996, 113.41)), ('A', '  84 ', 'GLU', 0.024150040575278836, (-2.5990000000000015, 12.817, 112.219)), ('A', '  96 ', 'GLY', 0.011358808127142773, (0.9000000000000009, 23.226, 124.226)), ('A', ' 110 ', 'THR', 0.030740319048474053, (17.011, 22.789, 113.402)), ('A', ' 119 ', 'GLU', 0.0020991208776938034, (13.89599999999999, 35.865999999999985, 108.031))]
data['rota'] = [('A', '   2 ', 'ASP', 0.05884362467738247, (-5.395, 23.654999999999998, 89.086)), ('A', '   3 ', 'GLN', 0.3243239050813389, (-1.594000000000001, 23.569, 88.878)), ('A', '   5 ', 'THR', 0.2554208481799435, (4.100999999999999, 25.663999999999994, 89.58799999999998)), ('A', '   6 ', 'GLU', 0.8677059742828046, (7.811000000000002, 25.654999999999994, 89.48899999999999)), ('A', '   7 ', 'GLU', 0.23301793849795138, (7.745999999999999, 27.324, 92.897)), ('A', '   8 ', 'GLN', 0.9149284368083195, (6.691000000000005, 24.101999999999993, 94.469)), ('A', '  12 ', 'PHE', 0.5489615088316298, (9.417000000000005, 19.854999999999997, 97.458)), ('A', '  13 ', 'LYS', 0.0002165939371805559, (13.058000000000003, 19.142, 96.586)), ('A', '  19 ', 'PHE', 0.2555877694214418, (14.547999999999998, 12.976999999999997, 104.405)), ('A', '  21 ', 'LYS', 0.09113738360655527, (20.266999999999996, 12.898999999999996, 104.386)), ('A', '  30 ', 'LYS', 0.3386578751144352, (16.730999999999998, 4.231, 107.65299999999999)), ('A', '  36 ', 'MET', 0.2663000745127794, (10.573, 10.236, 112.416)), ('A', '  39 ', 'LEU', 0.0, (9.773, 14.26, 115.074)), ('A', '  42 ', 'ASN', 0.2337410642755973, (9.719, 6.064, 117.183)), ('A', '  48 ', 'LEU', 0.0, (8.456, 2.021, 107.96899999999998)), ('A', '  54 ', 'GLU', 0.2071847347705266, (2.5420000000000003, 2.744999999999999, 99.69900000000001)), ('A', '  56 ', 'ASP', 0.0, (7.031, 4.096, 96.13)), ('A', '  71 ', 'MET', 0.0, (2.9280000000000004, 11.846, 96.49299999999998)), ('A', '  72 ', 'MET', 0.06813736058350366, (3.2229999999999994, 15.420999999999996, 97.821)), ('A', '  74 ', 'ARG', 0.03478224725575292, (-2.477, 16.410999999999994, 93.38899999999998)), ('A', '  81 ', 'SER', 0.9015445171523836, (-6.389, 13.64, 106.403)), ('A', '  82 ', 'GLU', 0.0, (-6.767, 14.76, 109.956)), ('A', '  83 ', 'GLU', 0.000485396863378437, (-6.150999999999998, 13.045999999999996, 113.41)), ('A', '  86 ', 'ARG', 0.15654859699692364, (-3.7059999999999995, 17.103, 115.399)), ('A', '  87 ', 'GLU', 0.0, (-0.6330000000000027, 15.057000000000004, 116.268)), ('A', '  95 ', 'ASP', 0.7608714111577733, (4.3720000000000026, 24.487, 124.917)), ('A', ' 100 ', 'ILE', 0.0, (2.838999999999995, 27.810999999999993, 117.00399999999999)), ('A', ' 105 ', 'LEU', 0.124460613201463, (8.664000000000005, 26.357999999999993, 113.917)), ('A', ' 106 ', 'ARG', 0.14713922725149714, (12.321000000000003, 27.005999999999993, 114.03299999999999)), ('A', ' 112 ', 'LEU', 0.8189478010172622, (15.311999999999996, 18.347, 111.99)), ('A', ' 115 ', 'LYS', 0.0, (19.045, 25.912, 109.312)), ('A', ' 116 ', 'LEU', 0.0, (17.144, 28.951, 108.30299999999998)), ('A', ' 120 ', 'GLU', 0.006440727009442905, (12.589000000000002, 32.534, 106.686)), ('A', ' 122 ', 'ASP', 0.32418202307323213, (8.553999999999995, 34.701, 109.571)), ('A', ' 123 ', 'GLU', 0.2696894962227736, (8.361999999999995, 34.06499999999999, 105.76599999999999)), ('A', ' 125 ', 'ILE', 0.16769584124475795, (4.535, 31.755, 109.411)), ('A', ' 143 ', 'GLN', 0.976189492222059, (-6.521000000000003, 25.13, 106.183)), ('A', ' 145 ', 'MET', 0.0, (-2.698000000000003, 21.612000000000005, 105.118))]
data['cbeta'] = [('A', '  99 ', 'TYR', ' ', 0.2739753636683229, (-0.3330000000000018, 29.89999999999999, 119.10899999999998))]
data['probe'] = [(' A  92  PHE  HB3', ' A 100  ILE HD12', -1.082, (5.581, 24.106, 115.704)), ('   153  TFP H181', ' A 144  MET  HA ', -0.952, (-2.806, 26.122, 104.266)), (' A   2  ASP  O  ', ' A   3  GLN  HB3', -0.951, (-2.432, 25.455, 88.826)), (' A  37  ARG  HA ', ' A  41  GLN  O  ', -0.856, (10.542, 8.708, 116.339)), (' A 125  ILE  CG2', ' A 136  VAL HG23', -0.793, (2.942, 31.295, 112.021)), (' A  82  GLU  O  ', ' A  84  GLU  N  ', -0.788, (-4.741, 13.274, 111.339)), (' A 110  THR HG22', ' A 111  ASN  N  ', -0.756, (17.883, 21.66, 115.489)), (' A  74  ARG  H  ', ' A  74  ARG  HD2', -0.744, (-1.012, 18.534, 92.989)), (' A  23  GLY  O  ', ' A  25  GLY  N  ', -0.696, (20.5, 10.768, 96.619)), (' A  52  ILE  O  ', ' A  56  ASP  HB3', -0.69, (7.837, 3.006, 98.938)), (' A 130  ILE  CD1', ' A 143  GLN  OE1', -0.689, (-7.39, 29.679, 107.685)), (' A  26  THR  HB ', ' A  62  THR  HB ', -0.688, (15.309, 5.005, 97.748)), (' A 116  LEU HD22', ' A 124  MET  CE ', -0.68, (12.244, 27.854, 106.674)), (' A  36  MET  HE1', ' A  51  MET  SD ', -0.677, (6.816, 6.179, 109.378)), (' A 142  VAL  O  ', ' A 143  GLN  C  ', -0.666, (-5.167, 24.047, 105.853)), (' A 105  LEU HD12', ' A 121  VAL HG23', -0.658, (9.05, 29.837, 111.291)), (' A   8  GLN  HB3', ' A  12  PHE  CE1', -0.639, (5.253, 21.977, 95.64)), (' A  27  ILE  O  ', ' A  27  ILE HG22', -0.634, (13.515, 7.117, 102.409)), (' A 118  ASP  O  ', ' A 119  GLU  HB2', -0.631, (16.069, 36.649, 108.786)), (' A   3  GLN  HG2', ' A   4  LEU  N  ', -0.628, (0.105, 24.37, 90.465)), (' A  27  ILE  HA ', ' A  31  GLU  OE1', -0.607, (16.843, 8.238, 101.876)), (' A  83  GLU  O  ', ' A  85  ILE  N  ', -0.606, (-3.5, 14.892, 112.471)), (' A 109  MET  HB3', ' A 114  GLU  HB2', -0.604, (14.551, 23.108, 110.003)), (' A  36  MET  SD ', ' A  43  PRO  HG3', -0.6, (8.089, 6.642, 112.255)), (' A 146  THR  OG1', ' A 147  ALA  N  ', -0.597, (-5.948, 22.008, 102.715)), (' A  32  LEU HD22', ' A  52  ILE HG13', -0.595, (9.357, 5.011, 104.16)), (' A  83  GLU  O  ', ' A  86  ARG  N  ', -0.592, (-4.034, 15.929, 113.682)), (' A  19  PHE  CD1', ' A  19  PHE  N  ', -0.591, (13.642, 14.455, 104.217)), (' A  71  MET  CE ', ' A  72  MET  HG2', -0.588, (5.028, 14.43, 100.177)), (' A  24  ASP  OD2', ' A  26  THR  OG1', -0.575, (18.73, 5.936, 97.678)), (' A 108  VAL  O  ', ' A 112  LEU  HB2', -0.573, (13.19, 19.698, 112.399)), (' A 144  MET  CG ', ' A 144  MET  O  ', -0.565, (-0.918, 24.49, 105.057)), (' A 121  VAL  O  ', ' A 125  ILE HG12', -0.563, (7.648, 31.942, 109.826)), (' A 120  GLU  O  ', ' A 124  MET  HG3', -0.561, (9.941, 30.146, 106.475)), (' A  92  PHE  O  ', ' A 104  GLU  HG2', -0.558, (6.317, 24.485, 119.012)), ('   153  TFP  H11', ' A 128  ALA  HB3', -0.556, (1.965, 28.801, 108.043)), (' A  93  ASP  OD2', ' A  96  GLY  HA2', -0.546, (0.434, 23.423, 122.229)), (' A  21  LYS  NZ ', ' A  35  VAL HG23', -0.539, (15.706, 13.595, 108.327)), ('   153  TFP  H10', ' A 136  VAL HG21', -0.536, (2.41, 29.038, 111.132)), (' A  19  PHE  O  ', ' A  31  GLU  HG2', -0.535, (17.202, 10.258, 104.702)), (' A  87  GLU  HG2', ' A  90  ARG  NH2', -0.522, (-0.888, 13.118, 118.445)), (' A  85  ILE  N  ', ' A  85  ILE HD13', -0.515, (-2.468, 15.297, 110.302)), (' A  82  GLU  O  ', ' A  83  GLU  C  ', -0.51, (-4.771, 13.492, 112.251)), (' A  41  GLN  C  ', ' A  43  PRO  HD3', -0.506, (8.899, 7.092, 115.318)), (' A  83  GLU  HB3', ' A  84  GLU  OE1', -0.498, (-5.334, 10.556, 111.793)), (' A 139  GLU  O  ', ' A 142  VAL  N  ', -0.497, (-5.474, 24.64, 110.074)), (' A  82  GLU  HA ', ' A  85  ILE HG12', -0.496, (-5.65, 15.884, 109.732)), (' A  66  PRO  O  ', ' A  69  LEU  N  ', -0.485, (7.872, 12.981, 93.668)), (' A  14  GLU  O  ', ' A  15  ALA  C  ', -0.483, (13.166, 18.113, 101.219)), (' A   5  THR  OG1', ' A   6  GLU  N  ', -0.482, (5.582, 27.02, 89.939)), (' A  99  TYR  HA ', ' A 136  VAL  O  ', -0.478, (-0.823, 28.451, 116.654)), (' A  14  GLU  C  ', ' A  16  PHE  N  ', -0.478, (12.875, 18.576, 100.068)), (' A  68  PHE  C  ', ' A  68  PHE  CD1', -0.476, (8.134, 13.719, 96.626)), (' A  44  THR  O  ', ' A  48  LEU HD22', -0.472, (10.08, 1.334, 111.188)), (' A 123  GLU  O  ', ' A 127  GLU  HG3', -0.464, (5.79, 33.004, 104.493)), (' A 105  LEU HD11', ' A 124  MET  SD ', -0.463, (9.118, 27.589, 108.894)), (' A  39  LEU  O  ', ' A  41  GLN  NE2', -0.46, (6.697, 12.652, 116.538)), (' A  58  ASP  N  ', ' A  58  ASP  OD1', -0.458, (8.789, 2.995, 91.857)), (' A  81  SER  O  ', ' A  82  GLU  OE1', -0.455, (-8.216, 15.837, 107.55)), (' A  58  ASP  O  ', ' A  59  GLY  C  ', -0.447, (9.921, -0.689, 92.591)), (' A  69  LEU  O  ', ' A  69  LEU HD13', -0.444, (5.284, 15.668, 92.453)), (' A  47  GLU  O  ', ' A  51  MET  HG3', -0.431, (5.422, 3.01, 107.617)), (' A  56  ASP  CG ', ' A  56  ASP  O  ', -0.43, (7.442, 2.167, 95.771)), (' A  13  LYS  HA ', ' A  16  PHE  HB2', -0.429, (12.771, 17.119, 97.048)), (' A 139  GLU  O  ', ' A 141  PHE  N  ', -0.425, (-4.701, 25.884, 110.386)), (' A 139  GLU  HB3', ' A 143  GLN HE22', -0.421, (-8.495, 27.824, 110.557)), ('   153  TFP  H6 ', '   153  TFP H131', -0.418, (4.996, 28.158, 104.863)), (' A 125  ILE  H  ', ' A 125  ILE HG12', -0.411, (7.022, 32.078, 109.903)), (' A   5  THR  C  ', ' A   7  GLU  H  ', -0.409, (6.229, 26.386, 90.997)), (' A  57  ALA  H  ', ' A  67  GLU  HG2', -0.406, (6.508, 5.599, 93.783)), (' A  28  THR HG22', ' A  62  THR HG22', -0.405, (16.501, 2.847, 100.288)), (' A 120  GLU  HA ', ' A 123  GLU  HB3', -0.404, (11.021, 33.188, 105.543))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
