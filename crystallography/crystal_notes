### structure factors from supercell, supercell indexing
If you calculate structure factors over a supercell that is made up of exact unit cells repeats, you get SF=0 for the intermediate Structure Factors. So for example, if I make a 2x1x1 supercell, h1k0l0 will be 0 and h2k0l0 will be the same h1k0l0 for the 1x1x1 unit cell. If I make a 4x3x3 supercell, equivalent structure factors will be:

1x1x1 SF's  == 4x3x3 SF's
1 0 0		4 0 0
0 1 0		0 3 0
0 0 1		0 0 3
1 1 1		4 3 3
2 2 2 		8 6 6

But if you calculate on a supercell but provide the unit cell parameters (CRYST and SCALE entries in PDB file), you will get the same SF's as for the 1x1x1 just with intensities scaled by however many unit cells are in the supercell. For example (look in /home/pjanowsk/Case/SFall/indexing) :

[pjanowsk@krakow indexing]$ grep -P '^\s*([1-9]|1[0-9]|20)\s+0\s+0' cryst_1x1x1.dat 
    1   0   0      173.95   -123.52
    2   0   0       73.99    124.61
    3   0   0       17.72     52.48
    4   0   0       37.43    135.39
    5   0   0       27.93    138.30
    6   0   0       17.70    -17.35
    7   0   0       10.39    -40.49
    8   0   0       12.41   -145.00
    9   0   0       10.59    158.49
   10   0   0        5.01   -109.98
[pjanowsk@krakow indexing]$ grep -P '^\s*([1-9]|1[0-9]|20)\s+0\s+0' cryst_3x3x3.dat 
    1   0   0        0.03   -163.65
    2   0   0        0.03   -178.16
    3   0   0     4696.29   -123.51
    4   0   0        0.03     33.82
    5   0   0        0.05     21.45
    6   0   0     1997.96    124.59
    7   0   0        0.07    161.99
    8   0   0        0.15   -156.92
    9   0   0      478.45     52.51
   10   0   0        0.02     33.42
   11   0   0        0.10     22.61
   12   0   0     1010.62    135.39
   13   0   0        0.12   -113.35
   14   0   0        0.10   -122.42
   15   0   0      754.32    138.31
   16   0   0        0.12   -124.09
   17   0   0        0.12    -40.47
   18   0   0      478.48    -17.38
   19   0   0        0.12     83.74
   20   0   0        0.09   -107.70
[pjanowsk@krakow indexing]$ grep -P '^\s*([1-9]|1[0-9]|20)\s+0\s+0' cryst_3x3x3_uc.dat (3x3x3 supercell but unit cell parameters in pdb file)
    1   0   0     4696.77   -123.51
    2   0   0     1997.35    124.60
    3   0   0      478.22     52.48
    4   0   0     1010.42    135.39
    5   0   0      754.27    138.31
    6   0   0      478.23    -17.38
    7   0   0      280.28    -40.47
    8   0   0      334.80   -145.03
    9   0   0      286.07    158.54
   10   0   0      135.40   -110.09

For understanding why this happens look in Rupp's book, pg 278, and calculate your own SF's. It works out because of the shape of the wave

# SFALL without Fobs look in /home/pjanowsk/Case/SFall/indexing

# PDBSET /home/pjanowsk/Case/SFall/indexing
Renumbers residues, atoms, set's occupancy and b-factors, eliminates or renames chain, addes element type to pdb

#PDBCUR remove occupancy and anisou and altconf
/home/pjanowsk/Case/4lzt/RunSi/1.5ms_analysis/sasa/pdbcur.sh

# Bfactors from crystal to a pdb file: use GetBfacsFromCif4SupCell.py in /home/pjanowsk/Case/SFall/indexing

#Resolution
lreso=1/resolution^2; resolution=1/sqrt(lreso)

# convert intensity cif to fobs mtz
/home/pjanowsk/Case/4lzt/cif_intensity_2_mtz_fobs.sh

# symmetry operations in box and cartesian space
if the space group symmetry operator is -Y,X-Y,Z, then the symmetry operator in box space is
box2 =

     0    -1     0
     1    -1     0
     0     0     1
in cartesian space that symmetry operator is:
REMARK 290   SMTRY1   2 -0.500000 -0.866025  0.000000        0.00000            
REMARK 290   SMTRY2   2  0.866025 -0.500000  0.000000        0.00000            
REMARK 290   SMTRY3   2  0.000000  0.000000  1.000000        0.00000

sym2 =

  -0.500000000000000  -0.866025000000000                   0
   0.866025000000000  -0.500000000000000                   0
                   0                   0   1.000000000000000

The relationship is

	sym2=invU*box2*U

where U is the transformation matrix for going from cartesian to fractional coordinates (so depends on box vectors).

# REFMAC (James's instructions for fav8)
refmac5 xyzin starthere.pdb hklin refme_4sigcut.mtz libin fav8_geometry.cif hklout refmacout.mtz xyzout refmacout.pdb << EOF
refi type aniso
make hydr yes
make hout yes
EOF 


#Rfactor between two sets of SF's (like Fsim for fav8 see email from James Holton 11/04/2012)
cad hklin1 refme_4sigcut.mtz hklin2 simulation_density_average.mtz hklout tmp.mtz << END
LABIN FILE 1 E1=F E2=SIGF
LABIN FILE 2 E1=FP E2=SIGFP
LABO FILE 1 E1=FP E2=SIGFP
LABO FILE 2 E1=FPH1 E2=SIGFPH1
END

   4 NONE    0.0   356.2     0  100.00    14.27    14.27  16.71   0.95   F  FP
   5 NONE    0.1     6.4     0  100.00     1.97     1.97  16.71   0.95   Q  SIGFP
   6 NONE    1.1   456.3     0  100.00    29.43    29.43  16.71   0.95   F  FOBS
   7 NONE    0.2    22.2     0  100.00     1.34     1.34  16.71   0.95   Q  SIGFOBS

  -28   6  12        1.60      6.20      4.38      0.32
  -28   6  13        3.70      6.23     16.65      0.36
  -28   7  13        0.99      5.94      6.49      0.58


scaleit hklin tmp.mtz hklout tmp2.mtz <<END
auto
refine
END

sftools
read tmp2.mtz
correl column 3 1

# to filter all hkl's to contain only the 4sig cutoff hkls use sftools (in ccp4)
1. read fav8_cutoff.mtz
2. read sim_density.mtz
3. select all
4. select minus col ?=absent
5. write out sim_density column to sim_density_cutoff.mtz.
   Eg: write md_95.mtz col 1 2 3 4
or run filter_mtz.py

#get specific reflection
phenix.mtz.dump test.mtz -c -f s | grep "^\-28,6,12"


# now you can also use filter_mtz.py (in /scripts/Phenix)

# electron density map
1. http://www.cmbi.ru.nl/pdb_redo/coot.html to get PDB_REDO for Coot
2. phenix.fetch_pdb 1akg --maps       will fetch structure and reflection data files from PDB and generate 2mFo-DFc and mFo-DFc maps (as well as anomalous difference map if reflection data is anomalous).


#convert cif to mtz:
phenix.cif_as_mtz_1.8.2-1309 4lzt-sf.cif --use-model=4lzt.pdb

#simple convert intensity to amplitude
phenix.reflection_file_converter 4lzt-sf.mtz --write-mtz-amplitudes --mtz=test.mtz --mtz-root-label=Fobs
#for a better way use truncate:

#molprobity
Run from phenix or from web server.
Having bad atom names on acetate (ACT) residues didn't affect.
Having 0.00 occupancy does affect (Clash score fails!) Need set to 1.00!

#diff map
Use diff_map.sh (combine FO/FC/PHI into one mtz file with cad, scale and get map using FFT)
Or use coot:extensions:Maps: make a difference map

fft hklin md_avg.mtz mapout tmp.map <<eof
labin F1=FP PHI=PHI
eof







#coot
> 3、Can you give me some tips and strategies about how to use coot to
> decrease R free? now I just use some basic tricks such as fit density and
> Ramachandran plot to refine the data.
This is what I do for your kind of resolution: set the weight for refinement
in COOT to 50 or 40 (the default is 60) and switch on torsion restraints and
possibly Ramachandran restraints. Then I go through the entire structure
residue by residue (space bar) refining windows of three residues (with the
't' key) and fixing everything that I can (that includes obvious solvent
molecules). Symmetry should always be switched on and NCS ghosts (if
available too). When that is done you can focus on the remaining difficult
bits by looking at the difference map peaks in COOT and at validation
reports from WHAT_CHECK, and MolProbity.

So now for the bit where I plug my own stuff: you can try PDB_REDO
(http://xtal.nki.nl/PDB_REDO for the server, there is also a stand-alone
version) to take a lot of work out of your hands. It optimises your
refinement in Refmac and, rebuilds side-chain and tries to find peptide
flips that improve you Ramachandran plot and fit with the maps. You also get
a lot of validation information that may help you with further rebuilding of
your model.

Cheers,
Robbie



#For phase restraints
chltofom -mtzin md_avg_nowat_952.mtz -mtzout md_avg_nowat_95_HL.mtz \
   -colin-phifom '/*/*/[PHIC,]' 
cad hklin1 md_avg_nowat_95_HL.mtz hklin2 md_avg_95_rfree.mtz hklout FreeRed.mtz << EOF
labin file 1 all
labin file 2 E1=R-free-flags
EOF
